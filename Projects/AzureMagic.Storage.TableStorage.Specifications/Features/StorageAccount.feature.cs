// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34014
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AzureMagic.Storage.TableStorage.Specifications.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class StorageAccountFeature : Xunit.IUseFixture<StorageAccountFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "StorageAccount.feature"
#line hidden
        
        public StorageAccountFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "StorageAccount", "The StorageAccount is required to communicate with Azure Storage REST API.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line 5
 testRunner.Given("accountName is devstoreaccount1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 6
 testRunner.And("accountKey is Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZ" +
                    "FPTOtr/KBHBeksoGMGw==", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 7
 testRunner.And("tablesUri is http://127.0.0.1:10002/devstoreaccount1/", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        public virtual void SetFixture(StorageAccountFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "StorageAccount")]
        [Xunit.TraitAttribute("Description", "Constructor(accountName: is not null, accountKey: is not null)")]
        public virtual void ConstructorAccountNameIsNotNullAccountKeyIsNotNull()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Constructor(accountName: is not null, accountKey: is not null)", ((string[])(null)));
#line 9
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 10
 testRunner.Given("accountName is dummyAccountName", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 11
 testRunner.Given("accountKey is dummyAccountKey", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 12
 testRunner.When("Constructor(accountName, accountKey) is called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 13
 testRunner.Then("a StorageAccount instance is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 14
 testRunner.And("Name should be accountName", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
 testRunner.And("Key should be accountKey", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
 testRunner.And("TablesUri should be https://dummyaccountname.table.core.windows.net/", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "StorageAccount")]
        [Xunit.TraitAttribute("Description", "Constructor(accountName: is null, accountKey: is not null)")]
        public virtual void ConstructorAccountNameIsNullAccountKeyIsNotNull()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Constructor(accountName: is null, accountKey: is not null)", ((string[])(null)));
#line 18
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 19
 testRunner.Given("accountName is null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 20
 testRunner.When("Constructor(accountName, accountKey) is called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 21
 testRunner.Then("ArgumentNullException is thrown for accountName", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "StorageAccount")]
        [Xunit.TraitAttribute("Description", "Constructor(accountName: is empty, accountKey: is not null)")]
        public virtual void ConstructorAccountNameIsEmptyAccountKeyIsNotNull()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Constructor(accountName: is empty, accountKey: is not null)", ((string[])(null)));
#line 23
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 24
 testRunner.Given("accountName is empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 25
 testRunner.When("Constructor(accountName, accountKey) is called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 26
 testRunner.Then("ArgumentException is thrown for accountName", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "StorageAccount")]
        [Xunit.TraitAttribute("Description", "Constructor(accountName: is not null, accountKey: is null)")]
        public virtual void ConstructorAccountNameIsNotNullAccountKeyIsNull()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Constructor(accountName: is not null, accountKey: is null)", ((string[])(null)));
#line 28
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 29
 testRunner.Given("accountName is null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 30
 testRunner.When("Constructor(accountName, accountKey) is called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 31
 testRunner.Then("ArgumentNullException is thrown for accountName", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "StorageAccount")]
        [Xunit.TraitAttribute("Description", "Constructor(accountName: is not null, accountKey: is empty)")]
        public virtual void ConstructorAccountNameIsNotNullAccountKeyIsEmpty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Constructor(accountName: is not null, accountKey: is empty)", ((string[])(null)));
#line 33
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 34
 testRunner.Given("accountKey is empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 35
 testRunner.When("Constructor(accountName, accountKey) is called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 36
 testRunner.Then("ArgumentException is thrown for accountKey", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "StorageAccount")]
        [Xunit.TraitAttribute("Description", "Constructor(accountName: is not null, accountKey: is not null, tablesUri: is not " +
            "null)")]
        public virtual void ConstructorAccountNameIsNotNullAccountKeyIsNotNullTablesUriIsNotNull()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Constructor(accountName: is not null, accountKey: is not null, tablesUri: is not " +
                    "null)", ((string[])(null)));
#line 38
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 39
 testRunner.When("Constructor(accountName, accountKey, tablesUri) is called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 40
 testRunner.Then("a StorageAccount instance is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "StorageAccount")]
        [Xunit.TraitAttribute("Description", "Constructor(accountName: is null, accountKey: is not null, tablesUri: is not null" +
            ")")]
        public virtual void ConstructorAccountNameIsNullAccountKeyIsNotNullTablesUriIsNotNull()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Constructor(accountName: is null, accountKey: is not null, tablesUri: is not null" +
                    ")", ((string[])(null)));
#line 42
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 43
 testRunner.Given("accountName is null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 44
 testRunner.When("Constructor(accountName, accountKey, tablesUri) is called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 45
 testRunner.Then("ArgumentNullException is thrown for accountName", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "StorageAccount")]
        [Xunit.TraitAttribute("Description", "Constructor(accountName: is not null, accountKey: is null, tablesUri: is not null" +
            ")")]
        public virtual void ConstructorAccountNameIsNotNullAccountKeyIsNullTablesUriIsNotNull()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Constructor(accountName: is not null, accountKey: is null, tablesUri: is not null" +
                    ")", ((string[])(null)));
#line 47
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 48
 testRunner.Given("accountKey is null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 49
 testRunner.When("Constructor(accountName, accountKey, tablesUri) is called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 50
 testRunner.Then("ArgumentNullException is thrown for accountKey", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "StorageAccount")]
        [Xunit.TraitAttribute("Description", "Constructor(accountName: is not null, accountKey: is not null, tablesUri: is null" +
            ")")]
        public virtual void ConstructorAccountNameIsNotNullAccountKeyIsNotNullTablesUriIsNull()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Constructor(accountName: is not null, accountKey: is not null, tablesUri: is null" +
                    ")", ((string[])(null)));
#line 52
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 53
 testRunner.Given("tablesUri is null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 54
 testRunner.When("Constructor(accountName, accountKey, tablesUri) is called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 55
 testRunner.Then("ArgumentNullException is thrown for tablesUri", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "StorageAccount")]
        [Xunit.TraitAttribute("Description", "Constructor(accountName: is empty, accountKey: is not null, tablesUri: is not nul" +
            "l)")]
        public virtual void ConstructorAccountNameIsEmptyAccountKeyIsNotNullTablesUriIsNotNull()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Constructor(accountName: is empty, accountKey: is not null, tablesUri: is not nul" +
                    "l)", ((string[])(null)));
#line 57
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 58
 testRunner.Given("accountName is empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 59
 testRunner.When("Constructor(accountName, accountKey, tablesUri) is called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 60
 testRunner.Then("ArgumentException is thrown for accountName", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "StorageAccount")]
        [Xunit.TraitAttribute("Description", "Constructor(accountName: is not null, accountKey: is empty, tablesUri: is not nul" +
            "l)")]
        public virtual void ConstructorAccountNameIsNotNullAccountKeyIsEmptyTablesUriIsNotNull()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Constructor(accountName: is not null, accountKey: is empty, tablesUri: is not nul" +
                    "l)", ((string[])(null)));
#line 62
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 63
 testRunner.Given("accountKey is empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 64
 testRunner.When("Constructor(accountName, accountKey, tablesUri) is called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 65
 testRunner.Then("ArgumentException is thrown for accountKey", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "StorageAccount")]
        [Xunit.TraitAttribute("Description", "CreateTablesUri(accountName: is null)")]
        public virtual void CreateTablesUriAccountNameIsNull()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CreateTablesUri(accountName: is null)", ((string[])(null)));
#line 67
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 68
 testRunner.Given("accountName is null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 69
 testRunner.When("CreateTablesUri(accountName) is called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 70
 testRunner.Then("ArgumentNullException is thrown for accountName", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "StorageAccount")]
        [Xunit.TraitAttribute("Description", "CreateTablesUri(accountName: is empty)")]
        public virtual void CreateTablesUriAccountNameIsEmpty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CreateTablesUri(accountName: is empty)", ((string[])(null)));
#line 72
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 73
 testRunner.Given("accountName is empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 74
 testRunner.When("CreateTablesUri(accountName) is called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 75
 testRunner.Then("ArgumentException is thrown for accountName", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "StorageAccount")]
        [Xunit.TraitAttribute("Description", "CreateTablesUri(accountName: dummy)")]
        public virtual void CreateTablesUriAccountNameDummy()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CreateTablesUri(accountName: dummy)", ((string[])(null)));
#line 77
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 78
 testRunner.Given("accountName is dummy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 79
 testRunner.When("CreateTablesUri(accountName) is called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 80
 testRunner.Then("Uri https://dummy.table.core.windows.net/ should be returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "StorageAccount")]
        [Xunit.TraitAttribute("Description", "ForStorageEmulator()")]
        public virtual void ForStorageEmulator()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ForStorageEmulator()", ((string[])(null)));
#line 82
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 83
 testRunner.When("ForStorageEmulator() is called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 84
 testRunner.Then("a StorageAccount instance is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 85
 testRunner.And("Name should be devstoreaccount1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 86
 testRunner.And("Key should be Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZ" +
                    "FPTOtr/KBHBeksoGMGw==", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 87
 testRunner.And("TablesUri should be http://127.0.0.1:10002/devstoreaccount1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                StorageAccountFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                StorageAccountFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
